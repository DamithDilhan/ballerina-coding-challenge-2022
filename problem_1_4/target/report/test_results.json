{"projectName":"problem_1_4","totalTests":2,"passed":2,"failed":0,"skipped":0,"coveredLines":27,"missedLines":3,"coveragePercentage":90.0,"moduleStatus":[{"name":"problem_1_4","totalTests":2,"passed":2,"failed":0,"skipped":0,"tests":[{"name":"processFuelRecordsTest#0","status":"PASSED"},{"name":"processFuelRecordsTest#1","status":"PASSED"}]}],"moduleCoverage":[{"name":"problem_1_4","coveredLines":27,"missedLines":3,"coveragePercentage":90.0,"sourceFiles":[{"name":"main.bal","coveredLines":[12,16,17,18,19,21,22,24,25,26,27,28,30,31,32,34,35,42,43,44,45,48,49,50,52,53,54],"missedLines":[56,57,58],"coveragePercentage":90.0,"sourceCode":"import ballerina/io;\n\nxmlns \"http://www.so2w.org\" as s;\n\ntype FuelUsage record {\n    readonly int employee_id;\n    int gas_fill_up_count;\n    decimal total_fuel_cost;\n    decimal total_gallons;\n    int min_odometer_reading;\n    int max_odometer_reading;\n};\n\nfunction processFuelRecords(string inputFilePath, string outputFilePath) returns error? {\n    // Write your code here\n    xml readXml \u003d check io:fileReadXml(inputFilePath);\n    xml content \u003d readXml.\u003cs:FuelEvents\u003e.children();\n    xml fuelEvents \u003d content.\u003cs:FuelEvent\u003e;\n    table\u003cFuelUsage\u003e key(employee_id) fuelUsage \u003d table [];\n\n    foreach var item in fuelEvents {\n        xml\u003cxml:Element|xml:Comment|xml:ProcessingInstruction|xml:Text\u003e child \u003d item.children();\n\n        string employeeIdS \u003d check item.employeeId;\n        int employeeId \u003d check int:fromString(employeeIdS);\n        int odometerReading \u003d check int:fromString(child.\u003cs:odometerReading\u003e.data());\n        decimal gallons \u003d check decimal:fromString(child.\u003cs:gallons\u003e.data());\n        decimal gasPrice \u003d check decimal:fromString(child.\u003cs:gasPrice\u003e.data());\n\n        FuelUsage? entry \u003d fuelUsage[employeeId];\n        if (entry \u003d\u003d ()) {\n            fuelUsage.add({\n                employee_id: employeeId,\n                gas_fill_up_count: 1,\n                total_fuel_cost: gallons * gasPrice,\n                total_gallons: gallons,\n                min_odometer_reading: odometerReading,\n                max_odometer_reading: odometerReading\n            });\n        }\n        else {\n            entry.gas_fill_up_count +\u003d 1;\n            entry.total_fuel_cost +\u003d (gallons * gasPrice);\n            entry.total_gallons +\u003d gallons;\n            entry.max_odometer_reading \u003d odometerReading;\n        }\n    }\n    xml outputData \u003d from FuelUsage r in fuelUsage\n        order by r.employee_id ascending\n        select xml `\u003cs:employeeFuelRecord employeeId\u003d\"${r.employee_id.toString()}\"\u003e\u003cs:gasFillUpCount\u003e${r.gas_fill_up_count}\u003c/s:gasFillUpCount\u003e\u003cs:totalFuelCost\u003e${r.total_fuel_cost}\u003c/s:totalFuelCost\u003e\u003cs:totalGallons\u003e${r.total_gallons}\u003c/s:totalGallons\u003e\u003cs:totalMilesAccrued\u003e${r.max_odometer_reading - r.min_odometer_reading}\u003c/s:totalMilesAccrued\u003e\u003c/s:employeeFuelRecord\u003e`;\n\n    xml writeContent \u003d xml `\u003cs:employeeFuelRecords xmlns:s\u003d\"http://www.so2w.org\"\u003e${outputData}\u003c/s:employeeFuelRecords\u003e`;\n    check io:fileWriteXml(outputFilePath, writeContent);\n}\n\npublic function main() {\n    io:println(processFuelRecords(\"tests/resources/example01_input.xml\", \"target/example01_output.xml\"));\n}\n"}]}]}