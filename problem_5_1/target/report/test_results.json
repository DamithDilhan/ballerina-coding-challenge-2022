{"projectName":"problem_5_1","totalTests":2,"passed":2,"failed":0,"skipped":0,"coveredLines":51,"missedLines":5,"coveragePercentage":91.07,"moduleStatus":[{"name":"problem_5_1","totalTests":2,"passed":2,"failed":0,"skipped":0,"tests":[{"name":"testGqlWithMinutesService","status":"PASSED"},{"name":"testGqlWithSecondsService","status":"PASSED"}]},{"name":"problem_5_1.back_ends","totalTests":0,"passed":0,"failed":0,"skipped":0,"tests":[]}],"moduleCoverage":[{"name":"problem_5_1","coveredLines":39,"missedLines":4,"coveragePercentage":90.7,"sourceFiles":[{"name":"service.bal","coveredLines":[13,18,25,26,30,33,37,38,39,42,44,48,49,52,53,54,62,63,64,66,67,68,70,71,72,74,75,76,77,78,79,80,81,82,86,87,88,89,93],"missedLines":[40,45,50,58],"coveragePercentage":90.7,"sourceCode":"import ballerina/graphql;\nimport ballerina/http;\n\npublic enum TimeUnit {\n    SECONDS,\n    MINUTES\n}\n\ntype Levels record {\n    int deep;\n    int wake;\n    int light;\n};\n\ntype Summary record {\n    int minutes;\n    int thirtyDayAvgMinutes;\n};\n\ntype Sleep record {\n    string date;\n    int duration;\n    record {\n        map\u003cSummary\u003e summary;\n    } levels;\n};\n\ntype SleepResponse record {\n    Sleep[] sleep;\n};\n\n// Don\u0027t change the port number\nservice /graphql on new graphql:Listener(9090) {\n\n    // Write your answer here. You must change the input and\n    // the output of the below signature along with the logic.\n    resource function get sleepSummary(string ID, TimeUnit timeunit) returns SleepSummary[] {\n        http:Client|error fitfitEp \u003d new (\"http://localhost:9091\");\n        if (fitfitEp is error) {\n            return [];\n        }\n        json|error response \u003d fitfitEp-\u003eget(\"/activities/summary/sleep/user/1\");\n\n        if (response is error) {\n            return [];\n        }\n\n        SleepResponse|error arr \u003d response.cloneWithType(SleepResponse);\n        if (arr is error) {\n            return [];\n        }\n        return arr.sleep.map(entry \u003d\u003e new SleepSummary(entry, timeunit));\n    }\n}\n\nservice class SleepSummary {\n\n    private final readonly \u0026 Sleep entryRecord;\n    private final TimeUnit timeunit;\n\n    function init(Sleep entryRecord, TimeUnit timeunit) {\n        self.entryRecord \u003d entryRecord.cloneReadOnly();\n        self.timeunit \u003d timeunit;\n    }\n\n    resource function get date() returns string {\n        return self.entryRecord.date;\n    }\n\n    resource function get duration() returns int {\n        return self.timeunit \u003d\u003d SECONDS ? self.entryRecord.duration * 60 : self.entryRecord.duration;\n    }\n\n    resource function get levels() returns Levels {\n        Summary deep \u003d self.entryRecord.levels.summary.get(\"deep\");\n        Summary wake \u003d self.entryRecord.levels.summary.get(\"wake\");\n        Summary light \u003d self.entryRecord.levels.summary.get(\"light\");\n        if (self.timeunit \u003d\u003d SECONDS) {\n            return {\n            \"deep\": deep.minutes * 60,\n            \"wake\": wake.minutes * 60,\n            \"light\": light.minutes * 60\n            };\n        }\n        else {\n            return {\n            \"deep\": deep.minutes,\n            \"wake\": wake.minutes,\n            \"light\": light.minutes\n            };\n        }\n\n    }\n\n}\n"}]},{"name":"problem_5_1.back_ends","coveredLines":12,"missedLines":1,"coveragePercentage":92.31,"sourceFiles":[{"name":"fitfit_sleep_summary.bal","coveredLines":[8,11,12,14,15,16,17,19,20,23,24,25],"missedLines":[21],"coveragePercentage":92.31,"sourceCode":"import ballerina/log;\nimport ballerina/io;\nimport ballerina/http;\nimport ballerina/os;\n\nconfigurable int sleep_summary_port \u003d 9091;\n\nservice /activities/summary on new http:Listener(sleep_summary_port) {\n\n    function init() {\n        log:printInfo(\"Fitfit sleep summary API started\", host \u003d \"0.0.0.0\", port \u003d sleep_summary_port, protocol \u003d \"HTTP\");\n    }\n\n    resource function get sleep/user/[string id]() returns json|error {\n        string dataSource \u003d os:getEnv(\"DATA_SOURCE\");\n        if dataSource \u003d\u003d \"\" {\n            dataSource \u003d \"tests/resources/data.json\";\n        }\n        json|io:Error data \u003d io:fileReadJson(dataSource);\n        if data is io:Error {\n            return error(\"Failed to load data\");\n        }\n        return data;\n    }\n}\n"}]}]}