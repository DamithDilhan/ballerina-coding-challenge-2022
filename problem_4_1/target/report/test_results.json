{"projectName":"problem_4_1","totalTests":8,"passed":8,"failed":0,"skipped":0,"coveredLines":62,"missedLines":17,"coveragePercentage":78.48,"moduleStatus":[{"name":"problem_4_1","totalTests":8,"passed":8,"failed":0,"skipped":0,"tests":[{"name":"testDeletingAnOrderSuccessfully1","status":"PASSED"},{"name":"testMenu1","status":"PASSED"},{"name":"testOrderPlacementFailureForInvalidJsonPayloadStructure1","status":"PASSED"},{"name":"testRetrievingOrderStatusForOrderIdWithUpdatedStatus1","status":"PASSED"},{"name":"testOrderPlacementSuccess1","status":"PASSED"},{"name":"testRetrievingOrderStatusWithAValidOrderId1","status":"PASSED"},{"name":"testRetrievingOrderStatusWithAnInvalidOrderId1","status":"PASSED"},{"name":"testUpdatingAnOrderSuccessfully1","status":"PASSED"}]}],"moduleCoverage":[{"name":"problem_4_1","coveredLines":62,"missedLines":17,"coveragePercentage":78.48,"sourceFiles":[{"name":"main.bal","coveredLines":[14,19,23,28,31,35,36,37,38,39,44,45,48,51,53,59,60,61,62,63,64,66,68,70,71,72,75,76,77,81,82,83,88,89,90,92,94,95,96,98,99,100,101,105,107,108,109,112,115,116,121,122,123,124,126,128,129,132,135,136,138,140],"missedLines":[32,42,46,49,54,55,56,78,79,84,85,110,113,117,118,130,133],"coveragePercentage":78.48,"sourceCode":"import ballerina/http;\n\nconfigurable int port \u003d 8080;\n\nmap\u003cint\u003e Menu \u003d {\n    \"Butter Cake\": 15,\n    \"Chocolate Cake\": 20,\n    \"Tres Leches\": 25\n};\n\npublic type \u0027Order record {|\n    string item;\n    int quantity;\n|};\n\npublic type Invoice record {\n    string username;\n    \u0027Order[] order_items;\n};\n\npublic type UpdateInvoice record {\n    \u0027Order[] order_items;\n};\n\ntype InvoiceReply record {\n    string order_id;\n    int total;\n};\n\nfunction calculateInvoice(Order[] data, boolean updateRecord) returns InvoiceReply|error {\n    if (data.length() \u003d\u003d 0) {\n        return error(\"empty order_items\");\n    }\n\n    map\u003cint\u003e orderedCakes \u003d {};\n    int totalCost \u003d 0;\n    foreach Order item in data {\n        if (orderedCakes[item.item] \u003d\u003d ()) {\n            orderedCakes[item.item] \u003d 1;\n        }\n        else {\n            return error(\"More than 1 order for same cake\");\n        }\n        int? price \u003d Menu[item.item];\n        if (price is ()) {\n            return error(\"Cake not in menu\");\n        }\n        if (item.quantity \u003c 1) {\n            return error(\"Quantity less than 1\");\n        }\n        totalCost +\u003d price * item.quantity;\n    }\n    if (updateRecord) {\n        return {\n            \"order_id\": \"\",\n            \"total\": totalCost\n        };\n    }\n    string orderId \u003d currentKey.toString();\n    currentKey +\u003d 1;\n    orderStatus[orderId] \u003d \"pending\";\n    return {\n        \"order_id\": orderId,\n        \"total\": totalCost\n    };\n}\n\nservice http:Service / on new http:Listener(port) {\n    // Retrive menu - GET /menu\n    resource function get menu() returns json {\n        return Menu.toJson();\n    }\n\n    // Place an order - POST /order \n    resource function post \u0027order(@http:Payload Invoice data) returns http:Created|http:BadRequest {\n        string username \u003d data.username;\n        if (username.length() \u003d\u003d 0) {\n            http:BadRequest badReply \u003d {\"body\": \"Username is empty\"};\n            return badReply;\n        }\n        Order[] orderList \u003d data.order_items;\n        InvoiceReply|error reply \u003d calculateInvoice(orderList, false);\n        if (reply is error) {\n            return \u003chttp:BadRequest\u003e{\n                \"body\": reply.message()\n            };\n        }\n        http:Created ok \u003d {body: reply.toJson()};\n        return ok;\n    }\n\n    resource function get \u0027order/[string orderId]() returns http:Ok|http:NotFound {\n\n        string? status \u003d orderStatus[orderId];\n        if (status \u003d\u003d ()) {\n            return \u003chttp:NotFound\u003e{\"body\": \"Order not found\"};\n        }\n        return \u003chttp:Ok\u003e{\n            body: {\n                \"order_id\": orderId,\n                \"status\": status\n                }\n        };\n\n    }\n\n    resource function put \u0027order/[string orderId](@http:Payload UpdateInvoice data) returns http:NotFound|http:BadRequest|http:Forbidden|http:Ok {\n        string? currentStatus \u003d orderStatus[orderId];\n        if (currentStatus \u003d\u003d ()) {\n            return \u003chttp:NotFound\u003e{\"body\": \"Order not found\"};\n        }\n        if (currentStatus \u003d\u003d \"in progress\" || currentStatus \u003d\u003d \"completed\") {\n            return \u003chttp:Forbidden\u003e{\"body\": \"Order is not pending\"};\n        }\n        InvoiceReply|error reply \u003d calculateInvoice(data.order_items, false);\n        if (reply is error) {\n            return \u003chttp:BadRequest\u003e{\n                \"body\": reply.message()\n            };\n        }\n        reply.order_id \u003d orderId;\n        http:Ok ok \u003d {body: reply.toJson()};\n        return ok;\n    }\n\n    resource function delete \u0027order/[string orderId]() returns http:NotFound|http:Forbidden|http:Ok {\n\n        string? currentStatus \u003d orderStatus[orderId];\n        if (currentStatus \u003d\u003d ()) {\n            return \u003chttp:NotFound\u003e{\"body\": \"Order not found\"};\n        }\n        if (currentStatus \u003d\u003d \"in progress\" || currentStatus \u003d\u003d \"completed\") {\n            return \u003chttp:Forbidden\u003e{\"body\": \"Order is not pending\"};\n        }\n        string? result \u003d orderStatus.removeIfHasKey(orderId);\n        return \u003chttp:Ok\u003e{body: result};\n\n    }\n\n}\n"}]}]}