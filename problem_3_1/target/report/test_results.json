{"projectName":"problem_3_1","totalTests":4,"passed":4,"failed":0,"skipped":0,"coveredLines":30,"missedLines":4,"coveragePercentage":88.24,"moduleStatus":[{"name":"problem_3_1","totalTests":4,"passed":4,"failed":0,"skipped":0,"tests":[{"name":"testConversion#\u0027case1\u0027","status":"PASSED"},{"name":"testConversion#\u0027case2\u0027","status":"PASSED"},{"name":"testInvalidInput#0","status":"PASSED"},{"name":"testInvalidInput#1","status":"PASSED"}]},{"name":"problem_3_1.backend","totalTests":0,"passed":0,"failed":0,"skipped":0,"tests":[]}],"moduleCoverage":[{"name":"problem_3_1","coveredLines":11,"missedLines":4,"coveragePercentage":73.33,"sourceFiles":[{"name":"main.bal","coveredLines":[10,20,21,24,26,27,28,30,31,32,37],"missedLines":[35,39,40,41],"coveragePercentage":73.33,"sourceCode":"import ballerina/io;\nimport ballerina/http;\n\n# The exchange rate API base URL\nconfigurable string apiUrl \u003d \"http://localhost:8080\";\n\ntype Rates record {|\n    string base;\n    map\u003cdecimal\u003e rates;\n|};\n\n# Convert provided salary to local currency\n#\n# + salary - Salary in source currency\n# + sourceCurrency - Soruce currency\n# + localCurrency - Employee\u0027s local currency\n# + return - Salary in local currency or error\npublic function convertSalary(decimal salary, string sourceCurrency, string localCurrency) returns decimal|error {\n\n    if (sourceCurrency.length() !\u003d 3 || localCurrency.length() !\u003d 3) {\n        return error(\"invalid country codes\");\n    }\n    // Creates a new client with the backend URL.\n    final http:Client clientEndpoint \u003d check new (apiUrl);\n\n    json resp \u003d check clientEndpoint-\u003eget(\"/rates/\" + sourceCurrency);\n    Rates rates \u003d check resp.fromJsonWithType(Rates);\n    if (rates.rates.hasKey(localCurrency)) {\n\n        decimal? convertionRate \u003d rates.rates[localCurrency];\n        decimal result \u003d salary * \u003cdecimal\u003econvertionRate;\n        return result;\n    }\n    else {\n        return error(\"Invalid localCurrency\");\n    }\n}\n\npublic function main() {\n    io:println(convertSalary(1350.25, \"USD\", \"GBP\"));\n}\n"}]},{"name":"problem_3_1.backend","coveredLines":19,"missedLines":0,"coveragePercentage":100.0,"sourceFiles":[{"name":"backend.bal","coveredLines":[7,9,14,15,16,18,19,20,21,24,26,29,30,31,32,33,36,37,38],"missedLines":[],"coveragePercentage":100.0,"sourceCode":"import ballerina/io;\nimport ballerina/http;\n\ntype Rates record {|\n    string base;\n    map\u003cdecimal\u003e rates;\n|};\n\nservice / on new http:Listener(8080) {\n\n    private final Rates rates;\n\n    function init() returns error? {\n        json ratesJson \u003d check io:fileReadJson(\"tests/resources/rates.json\");\n        self.rates \u003d check ratesJson.fromJsonWithType(Rates);\n    }\n\n    resource function get rates/[string baseCurrency]() returns Rates|error {\n        decimal? rate \u003d self.rates.rates[baseCurrency];\n        if rate is () {\n            return error(\"Invalid base currency\");\n        }\n\n        Rates response \u003d {\n            base: baseCurrency,\n            rates: {}\n        };\n\n        foreach [string, decimal] entry in self.rates.rates.entries() {\n            string currency \u003d entry[0];\n            decimal rateInEuro \u003d entry[1];\n            decimal rateInBaseCurrency \u003d rateInEuro / rate;\n            response.rates[currency] \u003d rateInBaseCurrency;\n        }\n\n        return response;\n    }\n}\n"}]}]}