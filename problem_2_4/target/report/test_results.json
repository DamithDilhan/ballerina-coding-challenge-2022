{"projectName":"problem_2_4","totalTests":2,"passed":2,"failed":0,"skipped":0,"coveredLines":29,"missedLines":4,"coveragePercentage":87.88,"moduleStatus":[{"name":"problem_2_4","totalTests":2,"passed":2,"failed":0,"skipped":0,"tests":[{"name":"getHighValuesTest#\u0027Test1\u0027","status":"PASSED"},{"name":"getHighValuesTest#\u0027Test2\u0027","status":"PASSED"}]}],"moduleCoverage":[{"name":"problem_2_4","coveredLines":29,"missedLines":4,"coveragePercentage":87.88,"sourceFiles":[{"name":"main.bal","coveredLines":[9,10,11,12,13,14,15,16,18,20,21,23,25,26,28,29,30,31,34,35,36,37,38,39,40,41,42,44,50],"missedLines":[48,52,53,54],"coveragePercentage":87.88,"sourceCode":"// function getHighPaymentEmployees(string dbFilePath, decimal amount) returns string[]|error {\n//     //Add your logic here\n//     return [];\n// }\nimport ballerina/io;\nimport ballerina/sql;\nimport ballerinax/java.jdbc;\n\ntype HighPayment record {\n    @sql:Column {name: \"payment_id\"}\n    readonly int payment_id;\n    @sql:Column {name: \"name\"}\n    string employee_name;\n    @sql:Column {name: \"amount\"}\n    decimal amount;\n};\n\nfunction getHighPaymentEmployees(string dbFilePath, decimal amount) returns string[]|error {\n    jdbc:Client|sql:Error dbClient \u003d\n                            new (\"jdbc:h2:file:\" + dbFilePath,\n                            \"root\", \"root\");\n\n    if (dbClient is jdbc:Client) {\n        // Query table with a condition.\n        stream\u003cHighPayment, error?\u003e resultStream \u003d dbClient-\u003equery(`SELECT e.name, p.payment_id, p.amount FROM Employee AS e LEFT JOIN Payment as p ON e.employee_id\u003dp.employee_id WHERE p.amount\u003e -1;`);\n        table\u003cHighPayment\u003e key(payment_id) highPaymentTable \u003d table [];\n        // Iterates the result stream.\n        check from HighPayment customer in resultStream\n            do {\n                highPaymentTable.add(customer);\n            };\n\n        // Closes the stream to release the resources.\n        check resultStream.close();\n        check dbClient.close();\n        string[] unprocessEmployees \u003d from HighPayment data in highPaymentTable\n            where data.amount \u003e amount\n            order by data.employee_name ascending\n            select data.employee_name;\n        map\u003cint\u003e processEmployees \u003d {};\n        foreach string name in unprocessEmployees {\n            processEmployees[name] \u003d 1;\n        }\n        return processEmployees.keys();\n\n    }\n        else {\n        return dbClient;\n    }\n}\n\npublic function main() {\n    io:println(getHighPaymentEmployees(\"./db/gofigure\", 3000));\n}\n"}]}]}